<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>沉思涧 - 天马行空</title>
    <link href="https://lymslive.github.io/categories/tian-ma-xing-kong/atom.xml" rel="self" type="application/atom+xml"/>
    <link href="https://lymslive.github.io"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2025-09-07T00:00:00+00:00</updated>
    <id>https://lymslive.github.io/categories/tian-ma-xing-kong/atom.xml</id>
    <entry xml:lang="en">
        <title>对话式 AI 之于知识传承的意义略谈</title>
        <published>2025-09-07T00:00:00+00:00</published>
        <updated>2025-09-07T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://lymslive.github.io/think/ai-as-knowledge-teacher/" type="text/html"/>
        <id>https://lymslive.github.io/think/ai-as-knowledge-teacher/</id>
        
        <content type="html">&lt;h1 id=&quot;dui-hua-shi-ai-zhi-yu-zhi-shi-chuan-cheng-de-yi-yi-lue-tan&quot;&gt;对话式 AI 之于知识传承的意义略谈&lt;&#x2F;h1&gt;
&lt;p&gt;这几年 AI 很火，我也一直关注相关技术与资讯，可惜也没太多自己的见地。不过这两天
认真思索了这个话题，有些想法便记录下来，未必是真知灼见，仅一家之言耳，但若对大
家有所启发，不胜欣慰。&lt;&#x2F;p&gt;
&lt;p&gt;我觉得现阶段 AI（大语言模型） 的基本特征是对话式。生成式不过是基本特征的衍生，
且更多是生意上的考量，产品的宣传，毕竟生成式听起来就高大尚，不像对话式似乎有点
老土、朴素。简单的技术比喻，就是概率模型控制下的单词接龙。用户问一句，AI 根据
提问的上下文答一句；然后如果不止答一句，而是答一段，一大段呢；当回答体量远大于
问题体量时，看起来就像生成式了。于是用户的提问被偷换概念叫提示词了，又引出提示
词工程师这种新概念职业。&lt;&#x2F;p&gt;
&lt;p&gt;然而我们应该抓住本质，不忘初心，现阶段的 AI 就是基于对话式的，如果过分沉湎于生
成式的拍案惊奇，恐非正道。对话式 AI 虽然质朴，但意义非凡。简言之，计算机与互联
网解决了信息存储与信息传递的问题，然后 AI 解决的是知识传递的问题。信息不等于知
识，知识也不等于智慧，尽管前者是后者的基础。现阶段的 AI 可以传递知识，但仍未能
诞生智慧，也许那是下一阶段 AI 蜕变的宏伟目标，吾辈有生之年能否见证，犹未可知，
故今暂且不论。&lt;&#x2F;p&gt;
&lt;p&gt;知识传递，是技术向的词汇，若以社会以文明的角度观之，叫知识传承，这很重要！刘慈
欣的科幻短篇《乡村教师》曾对此有过震撼的阐述。人类以前只能通过声带这种器官的振
动，利用声波传递信息，那效率是极其低下的，而人类文明竟然能得以延续发展至如斯高
度，负责知识传承的职业教师功莫大焉。在当今的信息时代，信息传递效率已得到极致发
展（理论上是电磁波的光速），但只有在大语言模型的加持下，信息传递才能转变为有效
的知识传递！&lt;&#x2F;p&gt;
&lt;p&gt;如此，便解决了知识传递源端的限速问题，速率瓶颈转移到了广大的接收端个体，而以前
知识传递的速率瓶颈应该在发送端。古语之名师出高徒，就因名师难得，即使有名师，也
受到名师个体生物体能的限制，知识传递上限锁死了。而现在有了 AI 老师，知识传递的
限速瓶颈只在于接收个体，他们仍只能用眼睛读或耳朵听取 AI 老师传递的知识。这个生
物锁就更难解开了，除非像科幻片那般实现了脑机接口，即便如此，也恐怕难以普及。但
现阶段 AI 在知识传递层面上，就很容易普及大众，从理论上实现知识平等，然后就看个
体的天赋与努力了。&lt;&#x2F;p&gt;
&lt;p&gt;这就是现阶段对话式 AI 最重大的意义，仅此一点，足可立碑传世。实事求是，莫强求生
成式 AI 的幻觉。其实我不太赞同生成这个术语，因为它在 IT 界之前就用了，是确定性
生成的意思。比如从 doc 文档根据样式生成目录，从 excel 数据报表生产统计报表或各
类透视图表，从 markdown 或 json 生成网页，从可视化界面拖拉拽生成代码，从高级语
言代码生成汇编等……都是确定性生成。而现在为了抬高 AI 的逼格，却把确定性生成降
格为非确定性生成了。这个立足于知识传承的 AI 可不乎此等逼格，只各家 AI 产品需要
罢了。&lt;&#x2F;p&gt;
&lt;p&gt;把现阶段对话式 AI 当作生成式 AI 来使用，就相当于之前将在学校学到的知识机械地搬
到生产环境来使用。这在严肃的生产领域是要提高警惕的，不可取的。知识传递也不可谓
不严肃，但它的特点恰好容许随机性，没有哪条知识是绝对的正确或错误，更多的可能是
适合与不适合。AI 根据模型能力给出最接近正确的答案，它已经尽职了。但在严肃生产
领域，有随机错误的可能就不行，至少不能明知有系统性随机错误还掩耳盗铃般地直接使
用。&lt;&#x2F;p&gt;
&lt;p&gt;所以现在很多的 AI 产品（agent 智能体）都在围绕着如何降低随机错误而努力，但这无
法改变 AI 的核心本质，只是外围一环又一环的封装。有了华丽的包装，才能成为可推广
的产品，这就是生意。既是生意，就有赚有亏，能持续多久，也不好说，毕竟某家于此不
擅长。我只确信，知识传承必定是文明永恒的需求。&lt;&#x2F;p&gt;
&lt;p&gt;而在知识传承领域，我们中国有悠久的历史，不间断的史书传统，还有汉字载体跨时空、
跨专业的表达能力，这都是天然的独有优势。所以我看好国产化 AI 的未来，必能更好地
完成知识传承的伟大使命。虽然现在国产 AI 在某些方面还不如西方 AI ，那主要是由于
互联网的中文训练语料不足，而简中互联网成为一个个信息孤岛，也只因生意，无关本质
。此外，中国与西方国家相比还有一点，人民政府不会只考虑做生意的小事，会更多地考
虑千秋大事。&lt;&#x2F;p&gt;
&lt;p&gt;两千多年前，《论语》问世，那就是孔子与弟子们对话式语录体。孔子那个时代，东西方
都曾涌现出许多杰出思想家，百家争鸣，是人类史上一个重要的轴心时代。如今对话式
AI 也犹如横空出世，可谓根正苗红，继往开来，且东西方也一样的百花齐放，极有可能
撬动再一个轴心时代。我们何其之幸，见证这个时代。&lt;&#x2F;p&gt;
&lt;p&gt;如果认识到这一点，很多职业担心被 AI 取代的焦虑就可以释然了。因为今天这个 AI ，
它的历史使命是知识传承，所以它不会取代任何职业，最多会取代教师这个职业。其实说
会取代教师这个职业也是不准确的，它只是取代教师在知识传承上的这一个职能。为师者
，传道授业解惑，这曾是它最重要的职能，将来就可坦然移交给 AI 了。而教师该职业将
来的工作重心就可能转移到其他方面，比如心理辅导、陪伴监督、道德表率，等等。其实
这些杂项可能现在的教师理论上也有一定要求，但实际上由于授课任务繁重，都无法顾及
罢了。&lt;&#x2F;p&gt;
&lt;p&gt;也莫要小视道德表率这个貌似滑稽项，高技术未必带来高道德，我对此是偏悲观的。从今
往后在物欲横流的社会，每个个体的道德底线可能会逐渐下堕，但作为一个文明的国家与
民族，却是需要保持一定的道德高标准。所以将来还真有可能需要职业人来做道德表率，
而从如今的职业分工看，教师队伍往这个方向发展是最有可能、最靠谱的。&lt;&#x2F;p&gt;
&lt;p&gt;所以绝大部分职业都不可能被 AI 取代，但是各自的职能重心可能发生变化与转移，不能
适应变化的人才会在竞争中落于劣势。再比如被戏称革了自己命的程序员，AI 也不能真
正取代程序员，只是在 AI 时代，写代码的比重下降，读代码的比重上升——还有单元测
试与读单元测试代码的能力，毕竟单元测试也算是读代码与理解代码的一个手段。&lt;&#x2F;p&gt;
&lt;p&gt;职业工作不会被 AI 取代，这是个好消息。但同时还有个不好的消息，AI 未必会让工作
变得更轻松。就如上例而言，想想做道德表率可能比教教书难多了吧；读 AI 写的代码，
尤其是给 AI 所写的代码 debug ，未必就比维护自己写的代码更轻松。&lt;&#x2F;p&gt;
&lt;p&gt;这其中更底层的原理是，技术发展了，可以做的事情更多了，需要做的事情也就更多了。
再遥想汉武帝时代，要训练一支能横扫漠北匈奴的骑兵，想必是很辛苦很艰难的吧。如今
新中国科技飞跃过几个代际了，但要研制出天安门阅兵式上出现过与没出现过但反正我都
看不懂的国之重器，想必也是历经几代人的心血与努力，只会更艰难，也需要更多的军费
开支等代价。&lt;&#x2F;p&gt;
&lt;p&gt;因此说，AI 技术的发展，既不用担心工作会被取代，也不用妄想工作会更轻松。对于普
通大众而言，真正的幸运中的不幸是，两极分化可能会更严重了，躺平的牛马，与更累的
牛马。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>漫谈二进制与十六进制在计算机中的运用</title>
        <published>2024-01-14T00:00:00+00:00</published>
        <updated>2024-01-14T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://lymslive.github.io/blog/hex-and-binary-digital-usage/" type="text/html"/>
        <id>https://lymslive.github.io/blog/hex-and-binary-digital-usage/</id>
        
        <content type="html">&lt;h1 id=&quot;man-tan-er-jin-zhi-yu-shi-liu-jin-zhi-zai-ji-suan-ji-zhong-de-yun-yong&quot;&gt;漫谈二进制与十六进制在计算机中的运用&lt;&#x2F;h1&gt;
&lt;p&gt;众所周知，计算机内部使用二进制，与人们日常使用的十进制大相径庭。可能有些人，包
括一些初学计算机的学生，会对此感到困惑。本文试图用浅显的语言来聊一聊这个话题。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;jin-zhi-de-xuan-ze-yuan-yu-sheng-chan-shi-jian&quot;&gt;进制的选择源于生产实践&lt;&#x2F;h2&gt;
&lt;p&gt;其实，计算机是人类发明的，进制也是人类发明，所以计算机使用什么进制，只是人类的
选择。人类发明进制，主要是为了方便指导人类自身的生活及生产活动。在人类历史上，
使用最广泛的进制是十进制，大概人有十根手指，容易以此为凭计数吧。&lt;&#x2F;p&gt;
&lt;p&gt;但是，除了十进制外，人们在特定场合也经常使用其他进制。比如中国古代使用的算盘与
算筹，相当于五进制，那是在十进制为主的情况下的辅进制。现在仍然广泛使用的非十进
制是时间单位，以六十进制为主，十二进制为辅。中国古代的十天干与十二地支的循环也
是构成六十甲子循环。人类对时间的感知源于天体运动，对时间与日历的划分主要以太阳
与（或）月亮的运行规律为基础。人们不对此作十等分，而是十二等分，六十等分，是因
为发现这样更方便，更合理。譬如中国农历的二十四节气，在农业社会对农事生产的指导
是相当有意义的。所以，我们在某个领域选择某种进制，是实践导向的结果，这种进制更
适合这个领域而已。&lt;&#x2F;p&gt;
&lt;p&gt;另外，十六进也不新鲜，中国古代在称量时也用过十六进制，“半斤八两”这词就这么来的。
因为等分其实是最容易实现的，比十等分、十二等分都容易得多。不过只用一刀两半、一分
为二的粒度在很多情况下还是太粗了，所以一般要继续等分，分个三、四次，做成八等分、
十六等分，大家觉得这样的份量更方便使用，满足大部分场合的需求，就定下十六进制，
半斤八两。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ji-suan-ji-xin-xi-chan-ye-xuan-ze-liao-er-jin-zhi&quot;&gt;计算机信息产业选择了二进制&lt;&#x2F;h2&gt;
&lt;p&gt;所以，计算机使用二进制，也只是因为它更合适、更简单。首先，二进制是最小的进制，
并不存在一进制，如果一个事物只能承载一种状态，它是无法表示多种信息变化的，至少
需要两种状态，也就是二进制。其次，二进制实现也最简单。用电子元器件的高电平与低
电平就能表示 1 与 0 ，两种状态的区分与辨识是最容易的，容错也高。假设要使用所谓
的三进制，增加一种“不高不低”电平，那会使状态判断的难度剧增，完全得不偿失。这就
是大道至简，二进制足以表达任意变化，任意数据与信息，那就只用二进制就可以了。&lt;&#x2F;p&gt;
&lt;p&gt;当然，任何技术都该以人为本。在计算机之外讨论二进制的数值，经常也需要转为十进制
的“真实”数值。这种转换，只涉及一个基本的简单的数学原理。参考十进制是怎么用多项
式表示一个数的：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;1985 = 1 * 1000 + 9 * 100 + 8 * 10 + 5 * 1
&lt;&#x2F;span&gt;&lt;span&gt;     = 1 * 10^3 + 9 * 10^2 + 8 * 10^1 + 5 * 10^0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;然后随手写个 &lt;code&gt;1101&lt;&#x2F;code&gt; 的二进制，它就可按类似的公式求出对应的十进制表示：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;1101 = 1 * 2^3 + 1 * 2^2 + 0 * 2^1 + 1 * 2^0
&lt;&#x2F;span&gt;&lt;span&gt;     = 1 * 8 + 1 * 4 + 0 * 2 + 1 * 1
&lt;&#x2F;span&gt;&lt;span&gt;     = 8 + 4 + 1  = 13
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果要反过来，将十进制的 &lt;code&gt;13&lt;&#x2F;code&gt; 转为二进制的 &lt;code&gt;1101&lt;&#x2F;code&gt; ，那也就是个逆分解过程，不断
除 2 取余的过程，这里不再赘述。&lt;&#x2F;p&gt;
&lt;p&gt;简言之，任意进制的数值，可以用基数与进制数的指数幂多项式来表示，我们写在一起的
各位数字，在数学表达式上就是这个多项式的系数。二进制的基数只有 0 与 1 ，十进制
的基数就是常用的 0-9 这十个数，而十六进制就在 0-9 之后，借用 a-f 这六个字母分
表达到 10 至 15 的基数。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;cong-er-jin-zhi-dao-shi-liu-jin-zhi&quot;&gt;从二进制到十六进制&lt;&#x2F;h2&gt;
&lt;p&gt;除二进制外，在计算机学科还常用八进制与十六进制。但后两者不算独立的进制，它们本
质上也是二进制，或者说是基于二进制的辅进制，目的是为了更方便地表达或书写二进制
数值。&lt;&#x2F;p&gt;
&lt;p&gt;就如本文开头提及的算筹（与算盘）的五进制，它也不是独立的进制，只是十进制的辅进
制。一根算筹就像长条形的筷子，竖着放一根表示 1 ，放两根表示 2 …… 放四根表示 4
，但到了表示 5 ，它就不再是并排竖放五根了，而是横着放一根表示 5 。为啥这样规定
呢？因为一直并排着放下去，既费材料，也费空间，还对人肉识别不友好，比如并排放八
根或九根，你不能一眼很快看出具体是八根还是九根。所以就引入了“逢五转一”的辅进制，
但更根本的还是“逢十进一”的十进制。在算筹系统中，如果约定个位数用竖筹表示 1 ，
横筹表示 5 ，那么在十位数就反过来，用横筹表示 1 （也就是 10），竖筹表示 5 （也
就是 50），如此轮换，进一步增加数字的识别度。当然，这些约定，就是具体的技术与
工程问题了。现在我们不需要算筹了，所以也就不需要五进制。&lt;&#x2F;p&gt;
&lt;p&gt;但二进制仍需要八进制或十六进制的辅助，也是基于类似的表达原因。如果把写在纸上
（或打印在屏幕上）的二进制数值，那长串的 1 想象为并排竖放的算筹，就能发现问题
了，它很难被人眼识别。所以为了增加识别度，我们会将它分成三个一组，或四个一组，
并且用更丰富的数字符号（而不仅有 1 与 0）来表示每个分组部分。&lt;&#x2F;p&gt;
&lt;p&gt;其实在表达常规的十进制大数时，人们也经常会采用分组的办法。比如在西方国家，习惯
于每三位一组，有时会显式用逗号（下标）或单引号（上标）分隔，依次表示 thousand
（千）、million （百万）等。而在中国，更习惯按每四位分组，依次表示为万、亿等。&lt;&#x2F;p&gt;
&lt;p&gt;二进制的问题在于，它的单位太小，即使在日常十进制中并不大的数，用二进制表达也需
要很多位，太长了。所以对二进制位数分组，就显得更加迫切，如果每三位分组，就是八
进制，每四位分组，就是十六进制。理论上，也可以有按两位分组的四进制，与按五位分
组的三十二进制。但其他的分组二进制，并无实用，而八进制与十六进制，是有实用需求
才引入的，然后才逐渐流行起来，并成为事实标准。&lt;&#x2F;p&gt;
&lt;p&gt;八进制的基数有 &lt;code&gt;0-7&lt;&#x2F;code&gt; 八个符号，十六进制有基数有 &lt;code&gt;0-9a-f&lt;&#x2F;code&gt; 十六个符号（字母不分
大小写），它们与二进制 &lt;code&gt;0-1&lt;&#x2F;code&gt; 串组的对应关系如下：&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;基数&lt;&#x2F;th&gt;&lt;th&gt;三分组&lt;&#x2F;th&gt;&lt;th&gt;四分组&lt;&#x2F;th&gt;&lt;th&gt;十进制&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;0&lt;&#x2F;td&gt;&lt;td&gt;000&lt;&#x2F;td&gt;&lt;td&gt;0000&lt;&#x2F;td&gt;&lt;td&gt;0&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;001&lt;&#x2F;td&gt;&lt;td&gt;0001&lt;&#x2F;td&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;010&lt;&#x2F;td&gt;&lt;td&gt;0010&lt;&#x2F;td&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;011&lt;&#x2F;td&gt;&lt;td&gt;0011&lt;&#x2F;td&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;100&lt;&#x2F;td&gt;&lt;td&gt;0100&lt;&#x2F;td&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;101&lt;&#x2F;td&gt;&lt;td&gt;0101&lt;&#x2F;td&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;110&lt;&#x2F;td&gt;&lt;td&gt;0110&lt;&#x2F;td&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;7&lt;&#x2F;td&gt;&lt;td&gt;111&lt;&#x2F;td&gt;&lt;td&gt;0111&lt;&#x2F;td&gt;&lt;td&gt;7&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;1000&lt;&#x2F;td&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;9&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;1001&lt;&#x2F;td&gt;&lt;td&gt;9&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;a&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;1010&lt;&#x2F;td&gt;&lt;td&gt;10&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;b&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;1011&lt;&#x2F;td&gt;&lt;td&gt;11&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;c&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;1100&lt;&#x2F;td&gt;&lt;td&gt;12&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;d&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;1101&lt;&#x2F;td&gt;&lt;td&gt;13&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;e&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;1110&lt;&#x2F;td&gt;&lt;td&gt;14&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;f&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;1111&lt;&#x2F;td&gt;&lt;td&gt;15&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;8进制&lt;&#x2F;td&gt;&lt;td&gt;16进制&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;在计算机相关代码或文献中，为了将八进制或十六进制与常用十进制区分开来，在表述写
法上会加点前缀。其中八进制用 &lt;code&gt;0&lt;&#x2F;code&gt; 前缀，如 &lt;code&gt;0755&lt;&#x2F;code&gt; 表示八进制的 &lt;code&gt;755&lt;&#x2F;code&gt; ，也就是二
进制的 &lt;code&gt;111 101 101&lt;&#x2F;code&gt; 。十六进制用 &lt;code&gt;0x&lt;&#x2F;code&gt; 前缀，或大写的 &lt;code&gt;0X&lt;&#x2F;code&gt; ，如 &lt;code&gt;0xfe&lt;&#x2F;code&gt; 表示十
六进制的 &lt;code&gt;fe&lt;&#x2F;code&gt; ，也就是二进制的 &lt;code&gt;1111 1110&lt;&#x2F;code&gt; ，也就是十进制数值 &lt;code&gt;254&lt;&#x2F;code&gt; 。&lt;&#x2F;p&gt;
&lt;p&gt;由此可见，八进制、十六进制与二进制的转换是非常方便的，只要按基数表查表，分别转
换即可，基本可用人肉心算。但是二进制转十进制不是恰好倍数关系，没法分组分治，转
换起来就略麻烦些。用八进制或十六进制能大辐减少二进制数的位数长度，相比十进制的
等值数值，八进制表示略长，十六进制则短得多。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ba-jin-zhi-de-ying-yong-chang-jing&quot;&gt;八进制的应用场景&lt;&#x2F;h2&gt;
&lt;p&gt;据说，早期计算机的一个字节，不都是八位，而也有六位的情况。这可能是由于相关元器
件制造工艺与成本的原因，做六根导线比八根线会相对容易些吧。但现今这不是问题了，
一个字节八比特位已是工业与学界标准。八比特位正好分成两个四位组，也就是两个十六
进制数字，所以使用十六进制非常方便。但如果一个字节是六比特位的情况，则用八进制
更方便，这可能就是八进制出现的一个原因。&lt;&#x2F;p&gt;
&lt;p&gt;而现在，八进制与字节没关系了，所以它的应用场景远不如十六进制。现在仍然在广泛使
用的场合是 linux&#x2F;unix 系统的文件权限表示位。&lt;&#x2F;p&gt;
&lt;p&gt;文件有三个重要权限，分别是读、写与执行。是否可读或写好理解，是否可执行是表示该
文件是否能像程序那样执行，否则就当作普通的数据文件。在 Linux 中，很多普通文本
文件都可能是可执行的脚本程序，所以可执行这个属性或权限很重要。这三种权限，通常
表示为 &lt;code&gt;rwx&lt;&#x2F;code&gt; ，分别只有两种状态，是否或有没有该种权限，那就可用 &lt;code&gt;0&lt;&#x2F;code&gt; 或 &lt;code&gt;1&lt;&#x2F;code&gt; 表
示，即三位二进制数，也就可用一位八进制数来表示。在 Linux 中，相对于文件的用户
又分为三种，即文件所有者（owner）、同组用户（group）与其他用户（other），每种
用户的权限用一位八进制的话，完整权限就是三位八进制数字表示了。&lt;&#x2F;p&gt;
&lt;p&gt;Linux 用 &lt;code&gt;chmod&lt;&#x2F;code&gt; 命令来修改权限，它接受八进制数值，也接收文本参数，用文本参数
可能更直观，但当熟悉八进制表示法后，用八进制更简捷与直接。假设现在有个文件
&lt;code&gt;file.txt&lt;&#x2F;code&gt; 的权限是 &lt;code&gt;400&lt;&#x2F;code&gt; ，表示只有该文件的所有者有读权限，其他用户没有任何权
限；根据系统用户合作需要，要使其他用户也有读权限，自己及其他同组用户有写权限。
若用文本参数描叙这些权限修改动作，可能要分几条命令来执行：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chmod&lt;&#x2F;span&gt;&lt;span&gt; +r file.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chmod&lt;&#x2F;span&gt;&lt;span&gt; u+w file.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chmod&lt;&#x2F;span&gt;&lt;span&gt; g+w file.txt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;最终结果的权限是 &lt;code&gt;-rw-rw-r--&lt;&#x2F;code&gt; ，转为二进制是 &lt;code&gt;110 110 100&lt;&#x2F;code&gt; ，转成八进制就是
&lt;code&gt;664&lt;&#x2F;code&gt; ，所以直接按八进制数值修改权限的操作会更快：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chmod&lt;&#x2F;span&gt;&lt;span&gt; 664 file.txt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;当然，另外有个常见需求，写完一个脚本后，需要给它加个可执行权限，如果想给所有用
户加个可执行权限，用文件参数 &lt;code&gt;+x&lt;&#x2F;code&gt; 更方便：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chmod&lt;&#x2F;span&gt;&lt;span&gt; +x script.sh
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;但如果觉得给其他用户开脚本运行权限是比较危险的事，只想给自己及或信任的同组用户
开执行权限，那就用八进制一次修改更方便了，如：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chmod&lt;&#x2F;span&gt;&lt;span&gt; 774 script.sh
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;除了 Linux 文件权限表示法，笔者并没有在其他方面看到八进制有良好的运用实践了。
可以想见，如果 Linux&#x2F;Unix 系统完成历史使命，或者有更好的方式来表达权限特征，八
进制或许也会像五进制那样退出历史舞台。在八位字节统一标准后，只要十六进制辅助二
进制就足够了，没必要增加更多的复杂性。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;shi-liu-jin-zhi-wei-biao-de-er-jin-zhi&quot;&gt;十六进制为表的二进制&lt;&#x2F;h2&gt;
&lt;p&gt;因此，现在在很多场合下，十六进制与二进制，几乎是同义词了。二进制为里，十六进制
为表，在内部用二进制运算，输出给人类用户看时用十六进制。&lt;&#x2F;p&gt;
&lt;p&gt;比如，很多宣称能编辑二进制的文本编辑器，它实际是展示十六进制的。Linux 下常用的
文本编辑器 vim 也有二进制编辑功能，执行 &lt;code&gt;:%!xxd&lt;&#x2F;code&gt; 就把当前文件转为二进制“打开”
了。实际上 &lt;code&gt;xxd&lt;&#x2F;code&gt; 是随 vim 安装的独立工具，其功能是将输入内容用十六进制方式打印
出来。而在 vim 中执行 &lt;code&gt;:%!xxd&lt;&#x2F;code&gt; 其实是利用了 &lt;code&gt;:!&lt;&#x2F;code&gt; 的过滤功能，调用外部 &lt;code&gt;xxd&lt;&#x2F;code&gt; 程
序将当前编辑内容转为十六进制展示，并替换当前编辑内容（注意不要用 &lt;code&gt;:w&lt;&#x2F;code&gt; 保存，
否则就将十六进制的展示方式当作实际内容写入文件了，这很可能不是想要的；看完十六
进制的展示，最好用 &lt;code&gt;u&lt;&#x2F;code&gt; 命令撤回操作，回到正常文本展示模式）。&lt;&#x2F;p&gt;
&lt;p&gt;所以我们也可直接在 shell 命令行中用 &lt;code&gt;xxd&lt;&#x2F;code&gt; 来查看文件的二进制内容，例如：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xxd ~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.bashrc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;00000000:&lt;&#x2F;span&gt;&lt;span&gt; 2320 7e2f 2e62 6173 6872 633a 2065 7865  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# ~&#x2F;.bashrc: exe
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;00000010:&lt;&#x2F;span&gt;&lt;span&gt; 6375 7465 6420 6279 2062 6173 6828 3129  cuted by bash(1)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;00000020:&lt;&#x2F;span&gt;&lt;span&gt; 2066 6f72 206e 6f6e 2d6c 6f67 696e 2073   for non-login s
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;00000030:&lt;&#x2F;span&gt;&lt;span&gt; 6865 6c6c 732e 0a23 2073 6565 202f 7573  hells..# see &#x2F;us
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;00000040:&lt;&#x2F;span&gt;&lt;span&gt; 722f 7368 6172 652f 646f 632f 6261 7368  r&#x2F;share&#x2F;doc&#x2F;bash
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;00000050:&lt;&#x2F;span&gt;&lt;span&gt; 2f65 7861 6d70 6c65 732f 7374 6172 7475  &#x2F;examples&#x2F;startu
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;00000060:&lt;&#x2F;span&gt;&lt;span&gt; 702d 6669 6c65 7320 2869 6e20 7468 6520  p-files (in the
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;00000070:&lt;&#x2F;span&gt;&lt;span&gt; 7061 636b 6167 6520 6261 7368 2d64 6f63  package bash-doc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;00000080:&lt;&#x2F;span&gt;&lt;span&gt; 290a 2320 666f 7220 6578 616d 706c 6573  )&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.#&lt;&#x2F;span&gt;&lt;span&gt; for examples
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;00000090:&lt;&#x2F;span&gt;&lt;span&gt; 0a0a 2320 4966 206e 6f74 2072 756e 6e69  ..# If not runni
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;000000a0:&lt;&#x2F;span&gt;&lt;span&gt; 6e67 2069 6e74 6572 6163 7469 7665 6c79  ng interactively
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;000000b0:&lt;&#x2F;span&gt;&lt;span&gt; 2c20 646f 6e27 7420 646f 2061 6e79 7468  , don&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;t do anyth
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;000000c0: 696e 670a 6361 7365 2024 2d20 696e 0a20  ing.case $- in.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;000000d0: 2020 202a 692a 2920 3b3b 0a20 2020 2020     *i*) ;;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;......
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;而 &lt;code&gt;.bashrc&lt;&#x2F;code&gt; 其实是个普通文本文件，对应的前面几行如下：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cat ~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.bashrc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# ~&#x2F;.bashrc: executed by bash(1) for non-login shells.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# see &#x2F;usr&#x2F;share&#x2F;doc&#x2F;bash&#x2F;examples&#x2F;startup-files (in the package bash-doc)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# for examples
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# If not running interactively, don&amp;#39;t do anything
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;    *i*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;;;
&lt;&#x2F;span&gt;&lt;span&gt;......
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;大家可以对照着文件的实际内存，体会一下 &lt;code&gt;xxd&lt;&#x2F;code&gt; 打印二进制文件的格式，其他二进制
编辑器也基本是类似的风格。前面的“行号”，其实是地址，第二行 &lt;code&gt;10&lt;&#x2F;code&gt; 的十六进制数值
等于十进制的 &lt;code&gt;16&lt;&#x2F;code&gt; ，也就是每行打印 16 个字符（或字节）。中间部分的主体内容就是
每个字节的十六进制表示，每两个数值代表一字节，每两个字节间它额外加个空格也只为
整齐分隔，否则 32 个数字连在一起辨别困难。右侧部分是对应该行每个字节的文本展示，
如果是可打印字符（32-126 ascii 码），就可直接打印，其他字符统一用点占位表示不
可打印，比如该文件实际内容的第一行末尾的换行符 &lt;code&gt;0a&lt;&#x2F;code&gt; ，就大约在第 &lt;code&gt;30&lt;&#x2F;code&gt; 行中间位置。
另外注意，空格（十六进制 &lt;code&gt;20&lt;&#x2F;code&gt;）是也算可打印字符，右侧也对应一个空格。对于真正
的二进制文件，非文本文件，&lt;code&gt;xxd&lt;&#x2F;code&gt; 输出的右半侧预览基本都是一些不可识别的 &lt;code&gt;.&lt;&#x2F;code&gt; ，
即使偶尔碰巧是可打印字符，也未必是原文件的本意，只是某个字节正好落在 &lt;code&gt;[32, 126)&lt;&#x2F;code&gt; 
区间。&lt;&#x2F;p&gt;
&lt;p&gt;再举个常见的例子，MD5 摘要，它将任意长度的数据，通过某种算法得到 16 字节摘要。
Linux 下也有个命令 &lt;code&gt;md5sum&lt;&#x2F;code&gt; 用于求一个文件的 MD5 摘要，它打印的是 32 个数字，
用以表达内部算法求出的 16 个字节数据。如：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;md5sum&lt;&#x2F;span&gt;&lt;span&gt; .bashrc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f45e5e883584d4a9f955562066cf75f3&lt;&#x2F;span&gt;&lt;span&gt;  .bashrc
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;er-jin-zhi-da-shu-de-shi-jin-zhi-dan-wei&quot;&gt;二进制大数的十进制单位&lt;&#x2F;h2&gt;
&lt;p&gt;如前所述，在计算机很多领域，二进制或十六进制是表示数据的，并不一定有数值意义。
在向人类传达数据信息时，用两个十六进制数字代替一个字节数据更方便。此外，将十六
进制当作数值时，一般只用在与内存、存储相关的地址或容量上。&lt;&#x2F;p&gt;
&lt;p&gt;在表示容量数值时，人们又更习惯于十进制的表达，于此又衍生出一系列容量单位，如：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;1K = 1024 = 2^10&lt;&#x2F;li&gt;
&lt;li&gt;1M = 1024K = 2^20&lt;&#x2F;li&gt;
&lt;li&gt;1G = 1024M = 2^30&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;这种 1024 的“进制”单位，主要是用于表达字节数量，写作 &lt;code&gt;KB&lt;&#x2F;code&gt; 或 &lt;code&gt;MB&lt;&#x2F;code&gt; ，而不会单独
使用 &lt;code&gt;K&lt;&#x2F;code&gt; 来表示 1024，比如我们不会将某件商品卖价 1024 元写作 1K 元，不合习惯而
已。同时，这些单位是给十进制数值体系用的，比如我们会说 &lt;code&gt;15G&lt;&#x2F;code&gt; ，而不会说（十六
进制）&lt;code&gt;fG&lt;&#x2F;code&gt; 。&lt;&#x2F;p&gt;
&lt;p&gt;事实上，单独的 &lt;code&gt;K&lt;&#x2F;code&gt; 在十进制中也经常表示 1000 。所以一些硬盘生产商就会故意混淆
概念，标称 1GB 的容量，其实没有 1024MB ，只有 1000MB 。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;jie-yu&quot;&gt;结语&lt;&#x2F;h2&gt;
&lt;p&gt;本文简单探讨了计算机领域使用二进制与十六进制的相关话题。这尤其说是一种技术，不
如说是一种文化习惯，毕竟进制这概念在数学原理上也不复杂。在当前信息时代，即使不
是计算机从业人员，了解基本的二进制与十六进制也是有益的，以增加对这种数值表达的
熟悉与敏感度。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>粉妆玉砌的新《新白娘子传奇》</title>
        <published>2019-04-25T00:00:00+00:00</published>
        <updated>2019-04-25T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://lymslive.github.io/white/xinxinbai-fenzhuangyuqi/" type="text/html"/>
        <id>https://lymslive.github.io/white/xinxinbai-fenzhuangyuqi/</id>
        
        <summary type="html">&lt;!-- # 粉妆玉砌的新《新白娘子传奇》 --&gt;
&lt;p&gt;不行了，我要开启吐嘈第二波，聊聊有关主演们的演技问题。&lt;&#x2F;p&gt;
&lt;p&gt;如果要我用一个词来表达对新新白的直观感受，那就是粉妆玉砌：这白素贞演得粉妆玉砌。&lt;&#x2F;p&gt;
&lt;p&gt;如果用两个词，粉妆玉砌加粉妆玉砌：白素贞与许仙都粉妆玉砌。&lt;&#x2F;p&gt;
&lt;p&gt;如果三个词，粉妆玉砌加粉妆玉砌加粉妆玉砌：不仅白素贞与许仙，连法海都是粉妆玉砌。&lt;&#x2F;p&gt;
&lt;p&gt;我再想不到更合适的词汇来形容这仨主演的演技了。就像个精致的瓷娃娃，光滑，白净，
但是面无表情！看了二十来集了，他们几乎自始自终是相同的表情，就那种温温软软，淡
定从容，不慌不忙，犹如受宠若惊出席盛大晚会那般小心翼翼——原来他们知道是在演戏
啊，是在演与他们才德不相配的戏——看他们端立着背台词，就如喝白开水的感觉。&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>uno游戏漫谈</title>
        <published>2015-02-27T00:00:00+00:00</published>
        <updated>2015-02-27T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://lymslive.github.io/think/talk-about-uno/" type="text/html"/>
        <id>https://lymslive.github.io/think/talk-about-uno/</id>
        
        <summary type="html">&lt;!-- # uno游戏漫谈 --&gt;
&lt;!--原址：新浪博客 (2015-02-27 15:26:57) http:&#x2F;&#x2F;blog.sina.com.cn&#x2F;s&#x2F;blog_490c36be0102vd00.html --&gt;
&lt;!-- uno 游戏漫谈 --&gt;
&lt;!-- 七阶子&#x2F;2015-2 --&gt;
&lt;h2 id=&quot;yi&quot;&gt;（一）&lt;&#x2F;h2&gt;
&lt;p&gt;春节期间，我回老家，向家人引荐一种他们从未见过的“扑克”牌，即纸牌 uno ，泊来
品，洋玩意。虽然扑克大抵也是泊来品，但它早己是妇孺皆知的了。而 uno 则还是新贵
，1971才被欧洲人发明。&lt;&#x2F;p&gt;
&lt;p&gt;我老家是赣南客家农村，父辈们多是外出打工的农民工，孩子们呢，虽然如今大学生批量
生产，但我们那的孩子能上大学的还是不算多。总之，老家的亲朋好友们文化层次都不太
高，但是对于陌生新奇的 uno 牌，还是能很快上手，乐在其中。尤其是我的一些堂弟妹
，说是被之吸引而沉迷也不夸张——因为他们不能像大人们那样打扑克赌钱的。&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>也谈三国杀3v3平衡性之个人见解</title>
        <published>2011-01-27T00:00:00+00:00</published>
        <updated>2011-01-27T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://lymslive.github.io/think/sanguosha-3v3-balance-discuss/" type="text/html"/>
        <id>https://lymslive.github.io/think/sanguosha-3v3-balance-discuss/</id>
        
        <summary type="html">&lt;!-- # 也谈三国杀3v3平衡性之个人见解 --&gt;
&lt;!--原址：新浪博客 (2012-11-14 16:38:18) http:&#x2F;&#x2F;blog.sina.com.cn&#x2F;s&#x2F;blog_490c36be0101fjsf.html --&gt;
&lt;!-- 也谈三国杀3v3平衡性之个人见解 --&gt;
&lt;!-- 七阶子（2011-01-27） --&gt;
&lt;!-- 首帖地址：http:&#x2F;&#x2F;tieba.baidu.com&#x2F;p&#x2F;986234628 --&gt;
&lt;p&gt;（按：首发于百度贴吧）&lt;&#x2F;p&gt;
&lt;p&gt;　　先随便说些什么吧。基本只有OL机会，鲜有面杀机会的小彩笔，潜水良久，读过诸多
大大的文章，对我的实践与理论都深有启发，因而也想写写自己的心得吧。&lt;&#x2F;p&gt;
&lt;p&gt;　　本文基于三国杀3v3竞技的平衡性。若说平衡性与娱乐性有什么矛盾，使本文的一些
设想会些许降低娱乐性，那也无奈，请无视吧。其实，我非常希望三国杀能不断完善，最
终像中国象棋一样成为富有中国特色的大众棋牌游戏。所以，我也更关注其中的文化性，
而不懂考虑其商业性。&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>随笔：水漫金山是洪水神话的记忆痕迹</title>
        <published>2009-04-14T00:00:00+00:00</published>
        <updated>2009-04-14T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://lymslive.github.io/white/shuiman-jinshan-hongshui-shenhua-henji/" type="text/html"/>
        <id>https://lymslive.github.io/white/shuiman-jinshan-hongshui-shenhua-henji/</id>
        
        <summary type="html">&lt;!-- # 随笔：水漫金山是洪水神话的记忆痕迹 --&gt;
&lt;!--LINK: 2009-04-14 13:21:04 http:&#x2F;&#x2F;lymslive.blog.163.com&#x2F;blog&#x2F;static&#x2F;84291752009314121427&#x2F; --&gt;
&lt;!-- 随笔：水漫金山是洪水神话的记忆痕迹 --&gt;
&lt;!-- 七阶子　2009-4-14 --&gt;
&lt;p&gt;　　上周末，我们实验室去绍兴搞“学风建设”（兴许是前段时间“学术造假”风波使得我们
的导师组要重新重视学术道德规范吧），其实也就是旅游吧，其中就参观并瞻仰了大禹陵
。我像是三句话不离本行，尽管是第二本行，由大禹治水就不知怎么联想到了白蛇传的水
漫金山。&lt;&#x2F;p&gt;
&lt;p&gt;　“洪水神话”是世界各民族的远古神话中皆存在的共性，如此的高度一致以至有学者认为
它就是远古历史曲折但真实的反映，而决非凭空想像的产物。“水漫金山”是白蛇传传说中
最为瑰丽的场面，我也不相信它能凭空产物。不久前我也曾经撰文讨论过水漫金山应是由
古代镇江金山的地理气候而产生的联想[1]，现在我更怀疑它也是远古洪水神话的残留记
忆。其实白蛇传传说的起源算是晚的，比起四大民间传说的其他三个都要晚得多，所以我
说它只是记忆的残留，而且白蛇传的故事题材也允许它能承载这样的残留或再现。&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>闲谈白蛇传之爱情与宗教主题</title>
        <published>2009-03-30T00:00:00+00:00</published>
        <updated>2009-03-30T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://lymslive.github.io/white/baishezhuan-zhuti-aiqing-zongjiao/" type="text/html"/>
        <id>https://lymslive.github.io/white/baishezhuan-zhuti-aiqing-zongjiao/</id>
        
        <summary type="html">&lt;!-- # 闲谈白蛇传之爱情与宗教主题 --&gt;
&lt;!--LINK: 2009-03-30 18:55:50 http:&#x2F;&#x2F;lymslive.blog.163.com&#x2F;blog&#x2F;static&#x2F;842917520092306555079&#x2F; --&gt;
&lt;!-- 闲谈白蛇传之爱情与宗教主题 --&gt;
&lt;!-- 七阶子　2009-03-30 --&gt;
&lt;p&gt;　　上周末，有网友 wenwen 来杭游，“踏寻当年新白取景地”，因而觑得机会与她聊了聊
白蛇传的话题。记得她提到一点问我，“白蛇传的主题到底是什么，爱情？还是宗教？还
是反封建？”。我当时倒是一愣，因为我经常遇到朋友问我既然“研究”白蛇传那么深入，
可有什么心得，要我简要地概括几句。我多半会语塞，一则我并不健谈，二则白蛇传实在
也不易用几句话就能概括。好在这次 wenwen 提的是选择题，而非问答题，似乎更易于回
答吧。不过当时我也只能笑曰“肯定不是反封建的”——“证伪”也总是比“证实”来得轻易些，
以致有某名人说“科学也是证伪的”。&lt;&#x2F;p&gt;
&lt;p&gt;　　不过话说回来，白蛇传“反封建”的主题也并非一无是处。至少上世纪中后叶，中国大
陆在“反封建”的大旗下，也曾对白蛇传进行了相当有意义的研究工作，为白蛇传的研究建
立了一个可观的基础，也以此为指导思想改编了不少足以让读者观众感动与动容的白蛇传
文艺作品。而且，在反封建的中心原则下，还有一个更为婉转的词汇，叫“人民性”，而这
个词似乎到现在也仍不过时。&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>恨不逢君未嫁时——白娘子与孟丽君</title>
        <published>2008-09-10T00:00:00+00:00</published>
        <updated>2008-09-10T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://lymslive.github.io/think/bainiangzi-menglijun/" type="text/html"/>
        <id>https://lymslive.github.io/think/bainiangzi-menglijun/</id>
        
        <summary type="html">&lt;!-- # 恨不逢君未嫁时——白娘子与孟丽君 --&gt;
&lt;!--原址：新浪博客 (2008-09-10 23:36:16) http:&#x2F;&#x2F;blog.sina.com.cn&#x2F;s&#x2F;blog_490c36be0100au6f.html --&gt;
&lt;h2 id=&quot;yi&quot;&gt;一、&lt;&#x2F;h2&gt;
&lt;p&gt;　　那是一种很奇怪的感觉。数年前，我从电视剧中看到了白娘子，从此便对“白蛇传”这
个传说万分地痴迷起来；有位同学替我归纳的好，我的文学架构自此便建立在白蛇传之上
了。虽然文学我是自小就喜欢的，但在那之前并不知道如何喜欢，而且只是泛泛地喜欢。
而自认识了白蛇传，我在文学上的一切学习便有了中心依托，它是我的支点，它是我的触
发器；为了读懂白蛇传，它引导我向四面八方辐射似地补充完善自己的知识结构体系，也
促使我采用多种方式来表达自己对白蛇传的理解与对它的爱。&lt;&#x2F;p&gt;
&lt;p&gt;　　几年了，我至今仍不能满意地解释自己为什么这么喜欢白蛇传，或许这是永远不能用
理性解释的。我只知道，自认识白蛇传起，它便强烈地影响了我的大学生活，甚至隐约地
觉得它还将影响我的人生。我也只道，“白娘子”将是我最热爱的一个文学形象，再没其他
女子可以与之相媲美了。直到突然有一天我认识了陈端生笔下的“孟丽君”，才发现在中国
古典文学中，居然还有这么一个“名不见经传”（其文学价值与大众熟知程度严重不平衡）
的完美的女性形象。久违的震撼再次浮上心头，萦绕不去之际，不由暗暗地拿孟丽君与我
的白娘子作个“关公战秦琼”的比较——终于哀叹一声，“恨不逢君未嫁时”；若非我已然对《
白蛇传》先入为主，深入骨髓的话，我也一定会用我全部的精力去研读《再生缘》。&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>读《人类曾经被毁灭》有感</title>
        <published>2007-11-17T00:00:00+00:00</published>
        <updated>2007-11-17T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://lymslive.github.io/think/read-human-destroyed/" type="text/html"/>
        <id>https://lymslive.github.io/think/read-human-destroyed/</id>
        
        <summary type="html">&lt;!-- # 读《人类曾经被毁灭（李卫东）》 --&gt;
&lt;!--原址：新浪博客 (2007-11-17 20:21:01) http:&#x2F;&#x2F;blog.sina.com.cn&#x2F;s&#x2F;blog_490c36be01000bz3.html --&gt;
&lt;p&gt;　　最近在 88bbs 上读了本书，题目叫《人类曾经被毁灭》（李卫东），是有关人类起
源揭秘的推测，它说人类是由地外文明创造的。可能这个观点早就有人提出，不过我现在
仔细读了这样一本严谨的专著，还是很震撼的。该书结合当代最新科学技术的发展，如考
古学、空间技术、生物技术等，重新解读远古神话，旁征博引，论叙严密有序——我几乎就
要相信这一切是真的了。&lt;&#x2F;p&gt;
&lt;p&gt;　　下面我凭读后印象转述其主要观点。&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>漫谈语言信息密度及成本</title>
        <published>2007-03-24T00:00:00+00:00</published>
        <updated>2007-03-24T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://lymslive.github.io/think/lang-info-dens-cost/" type="text/html"/>
        <id>https://lymslive.github.io/think/lang-info-dens-cost/</id>
        
        <summary type="html">&lt;!-- # 漫谈语言信息密度及成本 --&gt;
&lt;!--原址：新浪博客 (2007-03-24 23:14:34) http:&#x2F;&#x2F;blog.sina.com.cn&#x2F;s&#x2F;blog_490c36be010008p3.html --&gt;
&lt;p&gt;　　我们知道，在当今信息时代，除了信息急剧膨胀外，记录信息的载体的容量也不断增
大。但是，随着信息总量的增加，信息密度却反而下降，可幸的是，获取信息、解读信息
也越发容易了，其所依托的是科技的进步与信息载体“硬件”成本的增加。&lt;&#x2F;p&gt;
&lt;p&gt;　　一般来说，我们可以用语言交流信息，或者可以广义地说，传递信息的就叫做“语言”
。文字是人类文明的伟大发明，从此语言得以记载、保存与流传。文字也需要载体，中国
最早的大约是甲骨文吧——有点遥远，我这就从简牍文开始说起吧，至于西方国家彼时用什
么书写暂且不管了。&lt;&#x2F;p&gt;
</summary>
        
    </entry>
</feed>
